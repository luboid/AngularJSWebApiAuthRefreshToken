(function (window, document, angular) {
    'use strict';

    var client_id = 'ngApp';
    var client_secret = null;

    function remove() {
        var frame = angular.element('#auth-frame');
        if (0 !== frame.length) {
            frame.remove();
        }
    }

    function load(url) {
        var frame = angular.element('#auth-frame');
        if (0 === frame.length) {
            var element = document.createElement("iframe");
            element.setAttribute('id', 'auth-frame');
            element.setAttribute('style', 'display:none');
            document.body.appendChild(element);
            frame = angular.element(element);
        }
        frame.attr('src', url);
    }

    angular.module('ea.services')
        .factory('ea.authentication', ['$rootScope', '$q', '$log', 'bk.utils', 'ea.data', 'ea.resources', function ($rootScope, $q, $log, utils, data, messages) {
            var currentExternalLogin = null,
                state = {
                    isAuthenticated: false,
                    token: {},
                    info: {},
                };

            // we here need access to others modules from app to verify access_token
            window.externalLogin = function (token) {
                remove();
                if (token && 0 === token.indexOf('#access_token')) {
                    token = utils.decodeFromUrl(token.substr(1));
                    data.account.userInfo(token.access_token)
                        .then(function (data) {
                            if (data.hasRegistered) {
                                currentExternalLogin = null;
                                assignToken(token, data)
                            }
                            else {
                                $rootScope.$broadcast('ea:authentication:externallogin', token, data);
                            }
                        });
                }
                else {
                    if (token && 0 === token.indexOf('#error')) {
                        token = utils.decodeFromUrl(token.substr(1));
                        $rootScope.$broadcast('ea:authentication:externallogin:error', token);
                    }
                    else {
                        $log.error('Invalid external token.', token);
                    }
                }
            };

            function raiseEvent() {
                $rootScope.$broadcast('ea:authentication:token', service);
            }

            function assignToken(token, info) {
                state.token = token || {};
                state.info = info || {};
                state.isAuthenticated = state.token && state.token.access_token;

                if (state.isAuthenticated) {
                    window.localStorage['token'] = angular.toJson(state.token)
                }
                else {
                    window.localStorage.removeItem('token');
                }

                raiseEvent();
            }

            function initialize() {
                //var token = window.localStorage['token'];
                //if (token) {
                //    token = angular.fromJson(token);
                //    data.account.userInfo(token.access_token)
                //        .then(function (data) {
                //            assignToken(token, data)
                //        }, function () {
                //            assignToken();
                //        });
                //}
            }

            function logIn(cridentials) {
                debugger;
                return data.account.logIn(cridentials)
                    .then(function (token) {
                        return data.account.userInfo(token.access_token)
                            .then(function (data) {
                                assignToken(token, data);
                            });
                    }, function (error) {
                        if (error.data.error === 'invalid_grant' && cridentials.grant_type === 'refresh_token') {
                            var login = $q.defer();
                            $rootScope.$broadcast('ea:authentication:login', login);
                            return login;
                        }
                        else {
                            assignToken();
                            if (error.data.error) {
                                throw error.data;
                            }
                            else {
                                throw { error: 'client_app', error_description: messages.authentication.common };
                            }
                        }
                    });
            }

            var service = {
                isAuthenticated: function () {
                    return state.isAuthenticated;
                },
                token: function () {
                    return state.token.access_token;
                },
                userName: function () {
                    return state.info.userName;
                },
                isInRole: function (name) {
                    return state.isAuthenticated && state.info.roles.indexOf(name) !== -1;
                },
                isTokenRequest: function (config) {
                    return data.utils.isTokenRequest(config);
                },
                logIn: function (cridentials) {
                    var cridentials = angular.copy(cridentials, {});
                    if (cridentials.grant_type === undefined) {
                        cridentials.grant_type = 'password';
                    }
                    if (cridentials.client_id === undefined) {
                        cridentials.client_id = client_id;
                    }
                    if (cridentials.client_secret === undefined) {
                        cridentials.client_secret = client_secret;
                    }
                    return logIn(cridentials);
                },
                refresh: function () {
                    var cridentials = {
                        grant_type: 'refresh_token',
                        refresh_token: state.token && state.token.refresh_token,
                        client_id: client_id,
                        client_secret: client_secret
                    };
                    return logIn(cridentials);
                },
                logOut: function () {
                    return data.account.logOut({ refreshToken: state.token.refresh_token })
                        .then(function (token) {
                            assignToken();
                            return true;
                        }, function (error) {
                            assignToken();
                            $log.error(error);
                        });
                },
                externalLogins: function (params) {
                    params = params || {};
                    if (params.generateState === undefined) {
                        params.generateState = true;
                    }
                    if (params.returnUrl === undefined) {
                        params.returnUrl = utils.hostUrl() + '/externallogin.html';;
                    }
                    if (params.client_id === undefined) {
                        params.client_id = client_id;
                    }
                    return data.account.externalLogins(params);
                },
                externalLogin: function (external) {
                    currentExternalLogin = external;

                    var win = window.open(external.url, '__externalLogin', 'width=1024,height=620,status=0,personalbar=0,toolbar=0,menubar=0');
                    if (win.focus) {
                        win.focus();
                    }
                },
                registerExternal: function (token, params, onSuccessLogin) {
                    if (onSuccessLogin === undefined) {
                        onSuccessLogin = true;
                    }

                    return data.account.registerExternal(token, params).then(function (emailConfirmation) {
                        if (onSuccessLogin && !emailConfirmation) {
                            load(currentExternalLogin.url);
                        }
                        return emailConfirmation;
                    });
                }
            };

            initialize();

            return service;
        }]);

})(window, document, window.angular);